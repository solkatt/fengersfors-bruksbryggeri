/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { Object3D } from "three";
import { useSpring, animated } from "@react-spring/three";

interface GLTFData {
  nodes: { [name: string]: any };
  materials: { [name: string]: any };
}


export function Model(props: any) {
  const { nodes, materials } = useGLTF("/Can.gltf") as GLTFData;
  return (
    <animated.group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Can.geometry}
        material={materials.Metallic}
        position={[0, 0, 0]}
        scale={[0.033, 0.084, 0.033]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Kapsyl.geometry}
        material={materials.Metallic}
        position={[0, 0.081, 0]}
        scale={0.009}
      />
      {/* <mesh
        castShadow
        receiveShadow
        scale={1.01}
        position={[0, -0.85, 0]}
        geometry={nodes.Label.geometry}
        material={materials.Label}
      /> */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.lock.geometry}
        material={materials.Metallic}
        position={[0, 0.079, 0.009]}
        scale={[0.011, 0.02, 0.011]}
      />
    </animated.group>
  );
}

useGLTF.preload("/Can.gltf");



